[{"name":"app.r","content":"install.packages(c(\"shinylive\", \"httpuv\"))\n\n\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(DT)\n\nui <- fluidPage(\n  theme = shinytheme(\"flatly\"),\n  titlePanel(\"$ Risk Calculator\"),\n  \n  fluidRow(\n    # Left panel with inputs\n    column(6,\n           wellPanel(\n             textInput(\"symbol\", \"Symbol:\", value = \"XYZQ\"),\n             numericInput(\"portfolio_size\", \"Portfolio Size $:\", value = 100000, min = 1),\n             numericInput(\"share_price\", \"Share Price:\", value = 100, min = 0.01),\n             numericInput(\"stop_price\", \"**Stop Price:\", value = 95, min = 0.01),\n             numericInput(\"risk_amount\", \"$ Amount to Risk:\", value = 1000, min = 1),\n             div(style = \"margin-top: 10px;\",\n                 actionButton(\"clear\", \"Clear All\", class = \"btn-default\"),\n                 actionButton(\"calculate\", \"Calculate\", class = \"btn-primary\")\n             ),\n             div(style = \"margin-top: 10px; color: gray; font-style: italic;\",\n                 \"** Must be less than share price\")\n           )\n    ),\n    \n    # Right panel with results\n    column(6,\n           wellPanel(\n             style = \"background-color: #e8f5e9;\",\n             div(style = \"display: grid; grid-template-columns: 2fr 1fr; gap: 10px;\",\n                 div(\"$ Stop Amount:\"), textOutput(\"stop_amount\", inline = TRUE),\n                 div(\"# of Shares to Buy:\"), textOutput(\"shares_to_buy\", inline = TRUE),\n                 div(\"$ Amt Position:\"), textOutput(\"position_amount\", inline = TRUE),\n                 div(\"Position Size %:\"), textOutput(\"position_size\", inline = TRUE),\n                 div(\"Risk as a % of Equity:\"), textOutput(\"risk_equity_pct\", inline = TRUE)\n             )\n           )\n    )\n  ),\n  \n  # Risk/Reward table\n  fluidRow(\n    column(12,\n           div(style = \"margin-top: 20px;\",\n               h4(\"Risk/Reward Analysis\"),\n               tableOutput(\"risk_reward_table\")\n           )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Reactive values to store calculations\n  rv <- reactiveValues(\n    calculated = FALSE\n  )\n  \n  # Initialize outputs\n  output$stop_amount <- renderText(\"\")\n  output$shares_to_buy <- renderText(\"\")\n  output$position_amount <- renderText(\"\")\n  output$position_size <- renderText(\"\")\n  output$risk_equity_pct <- renderText(\"\")\n  output$risk_reward_table <- renderTable(NULL)\n  \n  # Calculate button handler\n  observeEvent(input$calculate, {\n    # Validate inputs\n    if (is.null(input$share_price) || !is.numeric(input$share_price) || input$share_price <= 0) {\n      showNotification(\"Share price must be a positive number\", type = \"error\")\n      return()\n    }\n    \n    if (is.null(input$stop_price) || !is.numeric(input$stop_price) || input$stop_price <= 0) {\n      showNotification(\"Stop price must be a positive number\", type = \"error\")\n      return()\n    }\n    \n    if (is.null(input$risk_amount) || !is.numeric(input$risk_amount) || input$risk_amount <= 0) {\n      showNotification(\"Risk amount must be a positive number\", type = \"error\")\n      return()\n    }\n    \n    if (is.null(input$portfolio_size) || !is.numeric(input$portfolio_size) || input$portfolio_size <= 0) {\n      showNotification(\"Portfolio size must be a positive number\", type = \"error\")\n      return()\n    }\n    \n    if (input$share_price <= input$stop_price) {\n      showNotification(\"Stop price must be less than share price\", type = \"error\")\n      return()\n    }\n    \n    # Calculate position metrics\n    stop_amount <- abs(input$share_price - input$stop_price)\n    \n    # Check for division by zero\n    if (stop_amount == 0) {\n      showNotification(\"Stop amount cannot be zero\", type = \"error\")\n      return()\n    }\n    \n    shares_to_buy <- floor(input$risk_amount / stop_amount)\n    \n    # Check if we can buy at least 1 share\n    if (shares_to_buy == 0) {\n      showNotification(\"Risk amount too small - cannot buy any shares\", type = \"warning\")\n      return()\n    }\n    \n    position_amount <- shares_to_buy * input$share_price\n    position_size_pct <- position_amount / input$portfolio_size * 100\n    risk_equity_pct <- input$risk_amount / input$portfolio_size * 100\n    \n    # Update outputs\n    output$stop_amount <- renderText(sprintf(\"$%.2f\", stop_amount))\n    output$shares_to_buy <- renderText(sprintf(\"%d\", shares_to_buy))\n    output$position_amount <- renderText(sprintf(\"$%.2f\", position_amount))\n    output$position_size <- renderText(sprintf(\"%.2f%%\", position_size_pct))\n    output$risk_equity_pct <- renderText(sprintf(\"%.2f%%\", risk_equity_pct))\n    \n    # Create risk/reward table\n    risk_multiples <- 1:6\n    risk_amounts <- input$risk_amount * risk_multiples\n    upside_targets <- input$share_price + (risk_amounts / shares_to_buy)\n    gains_pct <- (upside_targets - input$share_price) / input$share_price * 100\n    \n    # Create clean table structure\n    risk_table <- data.frame(\n      \"1R\" = c(sprintf(\"$%.2f\", risk_amounts[1]), \n               sprintf(\"$%.2f\", upside_targets[1]),\n               sprintf(\"%.1f%%\", gains_pct[1])),\n      \"2R\" = c(sprintf(\"$%.2f\", risk_amounts[2]),\n               sprintf(\"$%.2f\", upside_targets[2]),\n               sprintf(\"%.1f%%\", gains_pct[2])),\n      \"3R\" = c(sprintf(\"$%.2f\", risk_amounts[3]),\n               sprintf(\"$%.2f\", upside_targets[3]),\n               sprintf(\"%.1f%%\", gains_pct[3])),\n      \"4R\" = c(sprintf(\"$%.2f\", risk_amounts[4]),\n               sprintf(\"$%.2f\", upside_targets[4]),\n               sprintf(\"%.1f%%\", gains_pct[4])),\n      \"5R\" = c(sprintf(\"$%.2f\", risk_amounts[5]),\n               sprintf(\"$%.2f\", upside_targets[5]),\n               sprintf(\"%.1f%%\", gains_pct[5])),\n      \"6R\" = c(sprintf(\"$%.2f\", risk_amounts[6]),\n               sprintf(\"$%.2f\", upside_targets[6]),\n               sprintf(\"%.1f%%\", gains_pct[6])),\n      stringsAsFactors = FALSE\n    )\n    \n    # Set proper row names\n    rownames(risk_table) <- c(\"Potential Gain ($)\", \"Target Price ($)\", \"% Gain\")\n    \n    output$risk_reward_table <- renderTable({\n      risk_table\n    }, rownames = TRUE, colnames = TRUE, align = 'c', digits = 2)\n    \n    rv$calculated <- TRUE\n  })\n  \n  # Clear button handler\n  observeEvent(input$clear, {\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"portfolio_size\", value = \"\")\n    updateNumericInput(session, \"share_price\", value = \"\")\n    updateNumericInput(session, \"stop_price\", value = \"\")\n    updateNumericInput(session, \"risk_amount\", value = \"\")\n    \n    # Clear outputs\n    output$stop_amount <- renderText(\"\")\n    output$shares_to_buy <- renderText(\"\")\n    output$position_amount <- renderText(\"\")\n    output$position_size <- renderText(\"\")\n    output$risk_equity_pct <- renderText(\"\")\n    output$risk_reward_table <- renderTable(NULL)\n    \n    rv$calculated <- FALSE\n  })\n}\n\nshinyApp(ui = ui, server = server)","type":"text"}]
